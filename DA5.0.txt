#include <iostream> 
using namespace std; 
struct tree 
{ 
 int data; 
 tree *leŌ;
 tree *right; 
}; 
class BST 
{ 
 
 public: 
 tree *root,*loc,*par,*suc,*parsuc,*ptr,*save; 
 BST() 
 { 
 root=NULL; 
 } 
 void createbst(int); 
 void deletenode(int); 
 void casea(tree *,tree *); 
 void caseb(); 
 
 void inorder(tree *); 
 void preorder(tree *); 
 void postorder(tree *); 
 void search(int); 
 int depth(tree *); 
 void printLeafNodes(tree *); 
 void printGivenLevel(tree *,int); 
 void printLevelOrder(tree *); 
 void mirror_tree(tree *); 
 tree* getroot(); 
}; 
void BST::createbst(int x) 
{ 
 tree *newnode,*ptr,*parent; 
 newnode=new tree; 
 newnode->data=x; 
 newnode->leŌ=NULL;
 newnode->right=NULL; 
 if(root==NULL) 
 { 
 root=newnode; 
 } 
 else 
 { 
 ptr=root; 
 while(ptr!=NULL) 
 { 
 parent=ptr; 
 if(x>ptr->data) 
 { 
 ptr=ptr->right; 
 } 
 else 
 { 
 ptr=ptr->leŌ;
 } 
 } 
 if(x>parent->data) 
 { 
 parent->right=newnode; 
 } 
 else 
 { 
 parent->leŌ=newnode;
 } 
 } 
} 
void BST::casea(tree *loc,tree *par) 
{ 
 tree *child; 
 
 if(loc->leŌ==NULL && loc->right==NULL) 
 { 
 child=NULL; 
 } 
 else if(loc->leŌ!=NULL)
 { 
 child=loc->leŌ;
 } 
 else 
 { 
 child=loc->right; 
 } 
 if(par!=NULL) 
 { 
 if(loc==par->leŌ)
 { 
 par->leŌ=child;
 } 
 else 
 { 
 par->right=child; 
 } 
 } 
 else 
 { 
 root=child; 
 } 
} 
void BST::caseb() 
{ 
 tree *suc,*parsuc,*ptr,*save; 
 ptr=loc->right; 
 save=loc; 
 while(ptr->leŌ!=NULL)
 { 
 save=ptr; 
 ptr=ptr->leŌ;
 } 
 suc=ptr; 
 parsuc=save; 
 casea(suc,parsuc); 
 if(par!=NULL) 
 { 
 if(loc==par->leŌ)
 { 
 par->leŌ=suc;
 } 
 else 
 { 
 par->right=suc; 
 } 
 } 
 else 
 { 
 root=suc; 
 } 
 suc->leŌ=loc->leŌ;
 suc->right=loc->right; 
} 
void BST::deletenode(int x) 
{ 
 // tree *loc,*par; 
 loc=root; 
 while(loc!=NULL && x!=loc->data) 
 { 
 par=loc; 
 
 if(x<loc->data) 
 { 
 loc=loc->leŌ;
 } 
 else 
 { 
 loc=loc->right; 
 } 
 } 
 if(loc==NULL) 
 { 
 cout<<"\n "<<x<<" not found."; 
 } 
 if(loc->right!=NULL && loc->leŌ!=NULL)
 { 
 caseb(); 
 } 
 else 
 { 
 casea(loc,par); 
 } 
 delete loc; 
} 
void BST::inorder(tree *ptr) 
{ 
 if(ptr!=NULL) 
 { 
 inorder(ptr->leŌ);
 cout<<ptr->data<<" "; 
 inorder(ptr->right); 
 } 
} 
void BST::preorder(tree *ptr) 
{ 
 if(ptr!=NULL) 
 { 
 cout<<ptr->data<<" "; 
 preorder(ptr->leŌ);
 preorder(ptr->right); 
 } 
} 
void BST::postorder(tree *ptr) 
{ 
 if(ptr!=NULL) 
 { 
 postorder(ptr->leŌ);
 postorder(ptr->right); 
 cout<<ptr->data<<" "; 
 } 
} 
void BST::search(int x) 
{ 
 tree *ptr; 
 ptr=root; 
 while(ptr!=NULL) 
 { 
 if(ptr->data==x) 
 { 
 cout<<"\n"<<x<<" found"; 
 break; 
 } 
 else if(x>ptr->data) 
 { 
 ptr=ptr->right; 
 } 
 else 
 { 
 ptr=ptr->leŌ;
 } 
 } 
 if(ptr==NULL) 
 { 
 cout<<"\n"<<x<<" not found."; 
 } 
} 
int BST::depth(tree *ptr) 
{ 
 int lh,rh; 
 if(ptr==NULL) 
 { 
 return 0; 
 } 
 else 
 { 
 lh=depth(ptr->leŌ)+1;
 rh=depth(ptr->right)+1; 
 
 } 
 if(lh>rh) 
 { 
 return lh; 
 } 
 else 
 { 
 return rh; 
 } 
} 
void BST::printLeafNodes(tree *ptr) 
{ 
 
 if(ptr == NULL) 
 { 
 
 return; 
 } 
 
 /* If root is leaf node, print data */ 
 if(ptr -> leŌ == NULL && ptr -> right == NULL) 
 { 
 cout<<ptr -> data << " "; 
 return; 
 } 
 
 /* If there exists leŌ child, recursively call leŌ s*/
 if(ptr->leŌ)
 printLeafNodes(ptr -> leŌ);
 
 /* If there exists right child, recursively call right subtree */ 
 if(ptr->right) 
 printLeafNodes(ptr -> right); 
} 
void BST::printGivenLevel(tree* ptr, int level) 
{ 
 if (ptr == NULL) 
 return; 
 if (level == 1) 
 prinƞ("%d ", ptr->data); 
 else if (level > 1) { 
 printGivenLevel(ptr->leŌ, level - 1); 
 printGivenLevel(ptr->right, level - 1); 
 } 
} 
void BST::printLevelOrder(tree* ptr) 
{ 
 int h = depth(ptr); 
 int i; 
 for (i = 1; i <= h; i++) { 
 printGivenLevel(ptr, i); 
 prinƞ("\n"); 
 } 
} 
void BST::mirror_tree(tree* ptr) 
{ 
 tree* temp; 
 if(ptr!=NULL) 
 { 
 temp = ptr->leŌ;
 ptr->leŌ = ptr->right; 
 ptr->right = temp; 
 mirror_tree(ptr->leŌ);
 mirror_tree(ptr->right); 
 } 
 else 
 return ; 
} 
tree * BST::getroot() 
{ 
 return root; 
} 
int main() 
{ 
 int ch,x,h; 
 BST t=BST(); 
 
 do 
 { 
 cout<<"\n 1. InserƟon into Binary search tree";
 cout<<"\n 2. DeleƟon from binary search tree";
 cout<<"\n 3. Search from binary search tree"; 
 cout<<"\n 4. Travesals"; 
 cout<<"\n 5. Depth of tree"; 
 cout<<"\n 6. Print leaf nodes"; 
 cout<<"\n 7. Display Level Wise"; 
 cout<<"\n 8. Mirror of a tree"; 
 cout<<"\n 9. Exit"; 
 cout<<"\n enter your choice: "; 
 cin>>ch; 
 switch(ch) 
 { 
 case 1: 
 cout<<"\n enter data to insert: "; 
 cin>>x; 
 t.createbst(x); 
 break; 
 case 2: 
 cout<<"\n enter data to delete: "; 
 cin>>x; 
 t.deletenode(x); 
 
 break; 
 case 3: 
 cout<<"\n enter data to search: "; 
 cin>>x; 
 t.search(x); 
 break; 
 case 4: 
 cout<<"\n Inorder: "; 
 t.inorder(t.root); 
 cout<<"\n Preorder: "; 
 t.preorder(t.root); 
 cout<<"\n Postorder: "; 
 t.postorder(t.root); 
 break; 
 case 5: 
 h=t.depth(t.root); 
 cout<<"\n depth of tree= "<<h; 
 break; 
 case 6: 
 t.printLeafNodes(t.root); 
 break; 
 case 7: 
 t.printLevelOrder(t.root); 
 case 8: 
 cout<<"\nMirror Image of tree: "; 
 t.mirror_tree(t.getroot()); 
 t.inorder(t.getroot()); 
 t.mirror_tree(t.getroot()); 
 break; 
 } 
 
 }while(ch!=9); 
 return 0; 
}